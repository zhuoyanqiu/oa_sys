<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <bean id="securityManager"
          class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator">
        </property>
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
            </list>
        </property>
        <property name="rememberMeManager.cookie.maxAge" value="10"/>
    </bean>
    <!--
    2. 配置 CacheManager.
    2.1 需要加入 ehcache 的 jar 包及配置文件.
    -->
    <bean id="cacheManager"
          class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile"
                  value="classpath:ehcache.xml"/>
    </bean>
    <!--授权认证的策略配置-->
    <bean id="authenticator"
          class="org.apache.shiro.authc.pam.ModularRealmAuthenticator"
    >
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>
    <!--
    3. 配置 Realm
    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的
    bean
    //实现自定义的数据域（重点）
    -->
    <bean id="jdbcRealm"
          class="com.gec.oasys.shiro.ShiroRealm">
    </bean>
    <!--
    =========================================================
    Shiro Spring-specific integration
    ========================================================= -->
    <!--
    4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在
    Spring IOC 容器中 shiro bean 的生命周期方法.
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--
    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了
    LifecycleBeanPostProcessor 之后才可以使用.
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--
    6. 配置 ShiroFilter.
    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的
    <filter-name> 一致.
    若不一致, 则会抛出:
    NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和
    <filter-name> 名字对应的 filter bean.
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login/toLoginForm"/>
        <property name="successUrl" value="/index/index"/>
        <property name="unauthorizedUrl"
                  value="/login/unauthorized.do"/>
        <!-- <property name="filterChainDefinitionMap"
        ref="filterChainDefinitionMap"></property> -->
        <!--
        配置哪些页面需要受保护.
        以及访问这些页面需要的权限.
        1). anon 可以被匿名访问
        2). authc 必须认证(即登录)后才可能访问的页面.
        3). logout 登出.
        4). roles 角色过滤器
        -->
        <property name="filterChainDefinitions">
            <value>
                /login/toLoginForm = anon
                /login/login = anon
                /res/** = anon
                /login/logout = logout
                <!-- /shiro/login = anon
                /shiro/logout = logout
                /user.jsp = roles[user]
                /admin.jsp = roles[admin] -->
                # everything else requires authentication:
<!--                /** = authc-->
                /** = authc
            </value>
        </property>
    </bean>

</beans>